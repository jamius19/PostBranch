//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var Pg = newPgTable("", "pg", "")

type pgTable struct {
	sqlite.Table

	// Columns
	ID        sqlite.ColumnInteger
	PgPath    sqlite.ColumnString
	Version   sqlite.ColumnInteger
	Status    sqlite.ColumnString
	Output    sqlite.ColumnString
	Adapter   sqlite.ColumnString
	RepoID    sqlite.ColumnInteger
	CreatedAt sqlite.ColumnTimestamp
	UpdatedAt sqlite.ColumnTimestamp

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
}

type PgTable struct {
	pgTable

	EXCLUDED pgTable
}

// AS creates new PgTable with assigned alias
func (a PgTable) AS(alias string) *PgTable {
	return newPgTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new PgTable with assigned schema name
func (a PgTable) FromSchema(schemaName string) *PgTable {
	return newPgTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new PgTable with assigned table prefix
func (a PgTable) WithPrefix(prefix string) *PgTable {
	return newPgTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new PgTable with assigned table suffix
func (a PgTable) WithSuffix(suffix string) *PgTable {
	return newPgTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newPgTable(schemaName, tableName, alias string) *PgTable {
	return &PgTable{
		pgTable:  newPgTableImpl(schemaName, tableName, alias),
		EXCLUDED: newPgTableImpl("", "excluded", ""),
	}
}

func newPgTableImpl(schemaName, tableName, alias string) pgTable {
	var (
		IDColumn        = sqlite.IntegerColumn("id")
		PgPathColumn    = sqlite.StringColumn("pg_path")
		VersionColumn   = sqlite.IntegerColumn("version")
		StatusColumn    = sqlite.StringColumn("status")
		OutputColumn    = sqlite.StringColumn("output")
		AdapterColumn   = sqlite.StringColumn("adapter")
		RepoIDColumn    = sqlite.IntegerColumn("repo_id")
		CreatedAtColumn = sqlite.TimestampColumn("created_at")
		UpdatedAtColumn = sqlite.TimestampColumn("updated_at")
		allColumns      = sqlite.ColumnList{IDColumn, PgPathColumn, VersionColumn, StatusColumn, OutputColumn, AdapterColumn, RepoIDColumn, CreatedAtColumn, UpdatedAtColumn}
		mutableColumns  = sqlite.ColumnList{PgPathColumn, VersionColumn, StatusColumn, OutputColumn, AdapterColumn, RepoIDColumn, CreatedAtColumn, UpdatedAtColumn}
	)

	return pgTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:        IDColumn,
		PgPath:    PgPathColumn,
		Version:   VersionColumn,
		Status:    StatusColumn,
		Output:    OutputColumn,
		Adapter:   AdapterColumn,
		RepoID:    RepoIDColumn,
		CreatedAt: CreatedAtColumn,
		UpdatedAt: UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}

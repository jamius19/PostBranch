//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var Credential = newCredentialTable("", "credential", "")

type credentialTable struct {
	sqlite.Table

	// Columns
	ID        sqlite.ColumnInteger
	RepoID    sqlite.ColumnInteger
	Password  sqlite.ColumnString
	CreatedAt sqlite.ColumnTimestamp
	UpdatedAt sqlite.ColumnTimestamp

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
}

type CredentialTable struct {
	credentialTable

	EXCLUDED credentialTable
}

// AS creates new CredentialTable with assigned alias
func (a CredentialTable) AS(alias string) *CredentialTable {
	return newCredentialTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new CredentialTable with assigned schema name
func (a CredentialTable) FromSchema(schemaName string) *CredentialTable {
	return newCredentialTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new CredentialTable with assigned table prefix
func (a CredentialTable) WithPrefix(prefix string) *CredentialTable {
	return newCredentialTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new CredentialTable with assigned table suffix
func (a CredentialTable) WithSuffix(suffix string) *CredentialTable {
	return newCredentialTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newCredentialTable(schemaName, tableName, alias string) *CredentialTable {
	return &CredentialTable{
		credentialTable: newCredentialTableImpl(schemaName, tableName, alias),
		EXCLUDED:        newCredentialTableImpl("", "excluded", ""),
	}
}

func newCredentialTableImpl(schemaName, tableName, alias string) credentialTable {
	var (
		IDColumn        = sqlite.IntegerColumn("id")
		RepoIDColumn    = sqlite.IntegerColumn("repo_id")
		PasswordColumn  = sqlite.StringColumn("PASSWORD")
		CreatedAtColumn = sqlite.TimestampColumn("created_at")
		UpdatedAtColumn = sqlite.TimestampColumn("updated_at")
		allColumns      = sqlite.ColumnList{IDColumn, RepoIDColumn, PasswordColumn, CreatedAtColumn, UpdatedAtColumn}
		mutableColumns  = sqlite.ColumnList{RepoIDColumn, PasswordColumn, CreatedAtColumn, UpdatedAtColumn}
	)

	return credentialTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:        IDColumn,
		RepoID:    RepoIDColumn,
		Password:  PasswordColumn,
		CreatedAt: CreatedAtColumn,
		UpdatedAt: UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}

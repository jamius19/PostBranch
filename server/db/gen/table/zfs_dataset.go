//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var ZfsDataset = newZfsDatasetTable("", "zfs_dataset", "")

type zfsDatasetTable struct {
	sqlite.Table

	// Columns
	ID        sqlite.ColumnInteger
	Name      sqlite.ColumnString
	PoolID    sqlite.ColumnInteger
	CreatedAt sqlite.ColumnTimestamp
	UpdatedAt sqlite.ColumnTimestamp

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
}

type ZfsDatasetTable struct {
	zfsDatasetTable

	EXCLUDED zfsDatasetTable
}

// AS creates new ZfsDatasetTable with assigned alias
func (a ZfsDatasetTable) AS(alias string) *ZfsDatasetTable {
	return newZfsDatasetTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ZfsDatasetTable with assigned schema name
func (a ZfsDatasetTable) FromSchema(schemaName string) *ZfsDatasetTable {
	return newZfsDatasetTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ZfsDatasetTable with assigned table prefix
func (a ZfsDatasetTable) WithPrefix(prefix string) *ZfsDatasetTable {
	return newZfsDatasetTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ZfsDatasetTable with assigned table suffix
func (a ZfsDatasetTable) WithSuffix(suffix string) *ZfsDatasetTable {
	return newZfsDatasetTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newZfsDatasetTable(schemaName, tableName, alias string) *ZfsDatasetTable {
	return &ZfsDatasetTable{
		zfsDatasetTable: newZfsDatasetTableImpl(schemaName, tableName, alias),
		EXCLUDED:        newZfsDatasetTableImpl("", "excluded", ""),
	}
}

func newZfsDatasetTableImpl(schemaName, tableName, alias string) zfsDatasetTable {
	var (
		IDColumn        = sqlite.IntegerColumn("id")
		NameColumn      = sqlite.StringColumn("name")
		PoolIDColumn    = sqlite.IntegerColumn("pool_id")
		CreatedAtColumn = sqlite.TimestampColumn("created_at")
		UpdatedAtColumn = sqlite.TimestampColumn("updated_at")
		allColumns      = sqlite.ColumnList{IDColumn, NameColumn, PoolIDColumn, CreatedAtColumn, UpdatedAtColumn}
		mutableColumns  = sqlite.ColumnList{NameColumn, PoolIDColumn, CreatedAtColumn, UpdatedAtColumn}
	)

	return zfsDatasetTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:        IDColumn,
		Name:      NameColumn,
		PoolID:    PoolIDColumn,
		CreatedAt: CreatedAtColumn,
		UpdatedAt: UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}

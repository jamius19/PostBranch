// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: zfsqueries.sql

package fetch

import (
	"context"
)

const getDataset = `-- name: GetDataset :one
SELECT id, name, pool_id FROM zfs_dataset WHERE id = ?
`

func (q *Queries) GetDataset(ctx context.Context, id int64) (ZfsDataset, error) {
	row := q.db.QueryRowContext(ctx, getDataset, id)
	var i ZfsDataset
	err := row.Scan(&i.ID, &i.Name, &i.PoolID)
	return i, err
}

const getPool = `-- name: GetPool :one
SELECT id, name, loop_no FROM zfs_pool WHERE id = ?
`

func (q *Queries) GetPool(ctx context.Context, id int64) (ZfsPool, error) {
	row := q.db.QueryRowContext(ctx, getPool, id)
	var i ZfsPool
	err := row.Scan(&i.ID, &i.Name, &i.LoopNo)
	return i, err
}

const listDataset = `-- name: ListDataset :many
SELECT id, name, pool_id FROM zfs_dataset
`

func (q *Queries) ListDataset(ctx context.Context) ([]ZfsDataset, error) {
	rows, err := q.db.QueryContext(ctx, listDataset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ZfsDataset
	for rows.Next() {
		var i ZfsDataset
		if err := rows.Scan(&i.ID, &i.Name, &i.PoolID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPool = `-- name: ListPool :many
SELECT id, name, loop_no FROM zfs_pool
`

func (q *Queries) ListPool(ctx context.Context) ([]ZfsPool, error) {
	rows, err := q.db.QueryContext(ctx, listPool)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ZfsPool
	for rows.Next() {
		var i ZfsPool
		if err := rows.Scan(&i.ID, &i.Name, &i.LoopNo); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: pgqueries.sql

package fetch

import (
	"context"
)

const countPg = `-- name: CountPg :one
SELECT COUNT(*)
FROM pg
`

func (q *Queries) CountPg(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countPg)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getPg = `-- name: GetPg :one
SELECT id, name, path, version, created_at, updated_at
FROM pg
WHERE id = ?
`

func (q *Queries) GetPg(ctx context.Context, id int64) (Pg, error) {
	row := q.db.QueryRowContext(ctx, getPg, id)
	var i Pg
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Path,
		&i.Version,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listPg = `-- name: ListPg :many
SELECT id, name, path, version, created_at, updated_at
FROM pg
`

func (q *Queries) ListPg(ctx context.Context) ([]Pg, error) {
	rows, err := q.db.QueryContext(ctx, listPg)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Pg
	for rows.Next() {
		var i Pg
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Path,
			&i.Version,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: repoqueries.sql

package fetch

import (
	"context"
)

const countRepo = `-- name: CountRepo :one
SELECT COUNT(*) FROM repo
`

func (q *Queries) CountRepo(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countRepo)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getRepo = `-- name: GetRepo :one
SELECT id, name, pg_id, dataset_id, created_at, updated_at FROM repo WHERE id = ?
`

func (q *Queries) GetRepo(ctx context.Context, id int64) (Repo, error) {
	row := q.db.QueryRowContext(ctx, getRepo, id)
	var i Repo
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.PgID,
		&i.DatasetID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listRepo = `-- name: ListRepo :many
SELECT id, name, pg_id, dataset_id, created_at, updated_at FROM repo
`

func (q *Queries) ListRepo(ctx context.Context) ([]Repo, error) {
	rows, err := q.db.QueryContext(ctx, listRepo)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Repo
	for rows.Next() {
		var i Repo
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.PgID,
			&i.DatasetID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

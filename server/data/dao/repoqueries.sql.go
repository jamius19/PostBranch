// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: repoqueries.sql

package dao

import (
	"context"
	"database/sql"
)

const countRepo = `-- name: CountRepo :one
SELECT COUNT(*)
FROM repo
`

func (q *Queries) CountRepo(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countRepo)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countRepoByNameOrPath = `-- name: CountRepoByNameOrPath :one
SELECT COUNT(*)
FROM repo rp
         JOIN zfs_pool zp on rp.pool_id = zp.id
WHERE rp.name = ?
   OR zp.path = ?
`

type CountRepoByNameOrPathParams struct {
	Name string
	Path string
}

func (q *Queries) CountRepoByNameOrPath(ctx context.Context, arg CountRepoByNameOrPathParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, countRepoByNameOrPath, arg.Name, arg.Path)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createBranch = `-- name: CreateBranch :one
INSERT INTO branch (name, repo_id, parent_id, dataset_id)
VALUES (?, ?, ?, ?)
RETURNING id, name, repo_id, parent_id, dataset_id, created_at, updated_at
`

type CreateBranchParams struct {
	Name      string
	RepoID    int64
	ParentID  sql.NullInt64
	DatasetID int64
}

func (q *Queries) CreateBranch(ctx context.Context, arg CreateBranchParams) (Branch, error) {
	row := q.db.QueryRowContext(ctx, createBranch,
		arg.Name,
		arg.RepoID,
		arg.ParentID,
		arg.DatasetID,
	)
	var i Branch
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.RepoID,
		&i.ParentID,
		&i.DatasetID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createRepo = `-- name: CreateRepo :one
INSERT INTO repo (name, repo_type, pool_id)
VALUES (?, ?, ?)
RETURNING id, name, repo_type, pool_id, pg_id, created_at, updated_at
`

type CreateRepoParams struct {
	Name     string
	RepoType string
	PoolID   int64
}

func (q *Queries) CreateRepo(ctx context.Context, arg CreateRepoParams) (Repo, error) {
	row := q.db.QueryRowContext(ctx, createRepo, arg.Name, arg.RepoType, arg.PoolID)
	var i Repo
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.RepoType,
		&i.PoolID,
		&i.PgID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getRepo = `-- name: GetRepo :one
SELECT rp.id, rp.name, rp.repo_type, rp.pool_id, rp.pg_id, rp.created_at, rp.updated_at, zp.id, zp.path, zp.size_in_mb, zp.name, zp.mount_path, zp.created_at, zp.updated_at
FROM repo rp
         JOIN zfs_pool zp on rp.pool_id = zp.id
WHERE rp.id = ?
`

type GetRepoRow struct {
	Repo    Repo
	ZfsPool ZfsPool
}

func (q *Queries) GetRepo(ctx context.Context, id int64) (GetRepoRow, error) {
	row := q.db.QueryRowContext(ctx, getRepo, id)
	var i GetRepoRow
	err := row.Scan(
		&i.Repo.ID,
		&i.Repo.Name,
		&i.Repo.RepoType,
		&i.Repo.PoolID,
		&i.Repo.PgID,
		&i.Repo.CreatedAt,
		&i.Repo.UpdatedAt,
		&i.ZfsPool.ID,
		&i.ZfsPool.Path,
		&i.ZfsPool.SizeInMb,
		&i.ZfsPool.Name,
		&i.ZfsPool.MountPath,
		&i.ZfsPool.CreatedAt,
		&i.ZfsPool.UpdatedAt,
	)
	return i, err
}

const listBranchesByRepoId = `-- name: ListBranchesByRepoId :many
SELECT id, name, repo_id, parent_id, dataset_id, created_at, updated_at
FROM branch
WHERE repo_id = ?
`

func (q *Queries) ListBranchesByRepoId(ctx context.Context, repoID int64) ([]Branch, error) {
	rows, err := q.db.QueryContext(ctx, listBranchesByRepoId, repoID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Branch
	for rows.Next() {
		var i Branch
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.RepoID,
			&i.ParentID,
			&i.DatasetID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listRepo = `-- name: ListRepo :many
SELECT rp.id, rp.name, rp.repo_type, rp.pool_id, rp.pg_id, rp.created_at, rp.updated_at, zp.id, zp.path, zp.size_in_mb, zp.name, zp.mount_path, zp.created_at, zp.updated_at
FROM repo rp
         JOIN zfs_pool zp on rp.pool_id = zp.id
ORDER BY rp.created_at DESC
`

type ListRepoRow struct {
	Repo    Repo
	ZfsPool ZfsPool
}

func (q *Queries) ListRepo(ctx context.Context) ([]ListRepoRow, error) {
	rows, err := q.db.QueryContext(ctx, listRepo)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListRepoRow
	for rows.Next() {
		var i ListRepoRow
		if err := rows.Scan(
			&i.Repo.ID,
			&i.Repo.Name,
			&i.Repo.RepoType,
			&i.Repo.PoolID,
			&i.Repo.PgID,
			&i.Repo.CreatedAt,
			&i.Repo.UpdatedAt,
			&i.ZfsPool.ID,
			&i.ZfsPool.Path,
			&i.ZfsPool.SizeInMb,
			&i.ZfsPool.Name,
			&i.ZfsPool.MountPath,
			&i.ZfsPool.CreatedAt,
			&i.ZfsPool.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateRepoPg = `-- name: UpdateRepoPg :one
UPDATE repo
SET pg_id      = ?,
    updated_at = CURRENT_TIMESTAMP
WHERE id = ?
RETURNING id, name, repo_type, pool_id, pg_id, created_at, updated_at
`

type UpdateRepoPgParams struct {
	PgID sql.NullInt64
	ID   int64
}

func (q *Queries) UpdateRepoPg(ctx context.Context, arg UpdateRepoPgParams) (Repo, error) {
	row := q.db.QueryRowContext(ctx, updateRepoPg, arg.PgID, arg.ID)
	var i Repo
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.RepoType,
		&i.PoolID,
		&i.PgID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

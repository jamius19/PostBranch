// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: zfsqueries.sql

package dao

import (
	"context"
)

const createDataset = `-- name: CreateDataset :one
INSERT INTO zfs_dataset (name, pool_id)
VALUES (?, ?)
RETURNING id, name, pool_id, created_at, updated_at
`

type CreateDatasetParams struct {
	Name   string
	PoolID int64
}

func (q *Queries) CreateDataset(ctx context.Context, arg CreateDatasetParams) (ZfsDataset, error) {
	row := q.db.QueryRowContext(ctx, createDataset, arg.Name, arg.PoolID)
	var i ZfsDataset
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.PoolID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createPool = `-- name: CreatePool :one
INSERT INTO zfs_pool (name, path, size_in_mb, mount_path, pool_type)
VALUES (?, ?, ?, ?, ?)
RETURNING id, path, size_in_mb, name, mount_path, pool_type, created_at, updated_at
`

type CreatePoolParams struct {
	Name      string
	Path      string
	SizeInMb  int64
	MountPath string
	PoolType  string
}

func (q *Queries) CreatePool(ctx context.Context, arg CreatePoolParams) (ZfsPool, error) {
	row := q.db.QueryRowContext(ctx, createPool,
		arg.Name,
		arg.Path,
		arg.SizeInMb,
		arg.MountPath,
		arg.PoolType,
	)
	var i ZfsPool
	err := row.Scan(
		&i.ID,
		&i.Path,
		&i.SizeInMb,
		&i.Name,
		&i.MountPath,
		&i.PoolType,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deletePool = `-- name: DeletePool :exec
DELETE
FROM zfs_pool
WHERE id = ?
`

func (q *Queries) DeletePool(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deletePool, id)
	return err
}

const getDataset = `-- name: GetDataset :one
SELECT id, name, pool_id, created_at, updated_at
FROM zfs_dataset
WHERE id = ?
`

func (q *Queries) GetDataset(ctx context.Context, id int64) (ZfsDataset, error) {
	row := q.db.QueryRowContext(ctx, getDataset, id)
	var i ZfsDataset
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.PoolID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getDatasetByName = `-- name: GetDatasetByName :one
SELECT id, name, pool_id, created_at, updated_at
FROM zfs_dataset
WHERE name = ?
`

func (q *Queries) GetDatasetByName(ctx context.Context, name string) (ZfsDataset, error) {
	row := q.db.QueryRowContext(ctx, getDatasetByName, name)
	var i ZfsDataset
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.PoolID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPool = `-- name: GetPool :one
SELECT id, path, size_in_mb, name, mount_path, pool_type, created_at, updated_at
FROM zfs_pool
WHERE id = ?
`

func (q *Queries) GetPool(ctx context.Context, id int64) (ZfsPool, error) {
	row := q.db.QueryRowContext(ctx, getPool, id)
	var i ZfsPool
	err := row.Scan(
		&i.ID,
		&i.Path,
		&i.SizeInMb,
		&i.Name,
		&i.MountPath,
		&i.PoolType,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listDataset = `-- name: ListDataset :many
SELECT id, name, pool_id, created_at, updated_at
FROM zfs_dataset
`

func (q *Queries) ListDataset(ctx context.Context) ([]ZfsDataset, error) {
	rows, err := q.db.QueryContext(ctx, listDataset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ZfsDataset
	for rows.Next() {
		var i ZfsDataset
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.PoolID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPool = `-- name: ListPool :many
SELECT id, path, size_in_mb, name, mount_path, pool_type, created_at, updated_at
FROM zfs_pool
`

func (q *Queries) ListPool(ctx context.Context) ([]ZfsPool, error) {
	rows, err := q.db.QueryContext(ctx, listPool)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ZfsPool
	for rows.Next() {
		var i ZfsPool
		if err := rows.Scan(
			&i.ID,
			&i.Path,
			&i.SizeInMb,
			&i.Name,
			&i.MountPath,
			&i.PoolType,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
